$date
	Fri Jun 28 10:08:17 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPU $end
$var wire 32 ! write_value [31:0] $end
$var wire 3 " write_reg [2:0] $end
$var wire 32 # regBvalue [31:0] $end
$var wire 32 $ reg1val [31:0] $end
$var wire 32 % pcPlusOne [31:0] $end
$var wire 32 & pcInput [31:0] $end
$var wire 32 ' pcCurrent [31:0] $end
$var wire 32 ( offsetExtended [31:0] $end
$var wire 32 ) memResult [31:0] $end
$var wire 32 * instruction [31:0] $end
$var wire 1 + clk $end
$var wire 32 , aluValB [31:0] $end
$var wire 32 - aluValA [31:0] $end
$var wire 32 . aluResult [31:0] $end
$var wire 1 / CONTROL_WRITE_REG $end
$var wire 1 0 CONTROL_WRITE_DATA $end
$var wire 2 1 CONTROL_OPERATION [1:0] $end
$var wire 1 2 CONTROL_MEM_ACCESS $end
$var wire 1 3 CONTROL_JALR $end
$var wire 1 4 CONTROL_HALT $end
$var wire 1 5 CONTROL_ENABLE_REG_WRITE $end
$var wire 1 6 CONTROL_ENABLE_MEM_WRITE $end
$var wire 1 7 CONTROL_BEQ $end
$var wire 1 8 CONTROL_ALUvalB $end
$var wire 1 9 CONTROL_ALU_DONE $end
$var reg 33 : curOpcode [32:0] $end
$scope module PC $end
$var wire 32 ; pcInput [31:0] $end
$var wire 1 + clk $end
$var wire 1 4 CONTROL_HALT $end
$var reg 32 < pcCurrent [31:0] $end
$var reg 32 = pcPlusOne [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 > aluValB [31:0] $end
$var wire 32 ? aluValA [31:0] $end
$var wire 2 @ CONTROL_OPERATION [1:0] $end
$var reg 1 7 CONTROL_BEQ $end
$var reg 32 A aluResult [31:0] $end
$upscope $end
$scope module cRom $end
$var wire 3 B opcode [2:0] $end
$var wire 32 C pcCurrent [31:0] $end
$var wire 32 D instruction [31:0] $end
$var parameter 3 E OP_ADD $end
$var parameter 3 F OP_BEQ $end
$var parameter 3 G OP_HALT $end
$var parameter 3 H OP_JALR $end
$var parameter 3 I OP_LW $end
$var parameter 3 J OP_NOOP $end
$var parameter 3 K OP_NOR $end
$var parameter 3 L OP_SW $end
$var reg 1 8 CONTROL_ALUvalB $end
$var reg 1 6 CONTROL_ENABLE_MEM_WRITE $end
$var reg 1 5 CONTROL_ENABLE_REG_WRITE $end
$var reg 1 4 CONTROL_HALT $end
$var reg 1 3 CONTROL_JALR $end
$var reg 1 2 CONTROL_MEM_ACCESS $end
$var reg 2 M CONTROL_OPERATION [1:0] $end
$var reg 1 0 CONTROL_WRITE_DATA $end
$var reg 1 / CONTROL_WRITE_REG $end
$upscope $end
$scope module clock $end
$var reg 1 + clk $end
$upscope $end
$scope module dataM $end
$var wire 1 6 CONTROL_ENABLE_MEM_WRITE $end
$var wire 1 2 CONTROL_MEM_ACCESS $end
$var wire 32 N aluResult [31:0] $end
$var wire 32 O regBvalue [31:0] $end
$var reg 32 P memResult [31:0] $end
$var integer 32 Q ii [31:0] $end
$upscope $end
$scope module instrM $end
$var wire 32 R instr [31:0] $end
$var wire 32 S pcCurrent [31:0] $end
$upscope $end
$scope module pM $end
$var wire 1 7 CONTROL_BEQ $end
$var wire 1 3 CONTROL_JALR $end
$var wire 32 T pcCurrent [31:0] $end
$var wire 32 U pcPlusOne [31:0] $end
$var wire 32 V offsetExtended [31:0] $end
$var wire 32 W aluValA [31:0] $end
$var reg 32 X pcOutput [31:0] $end
$upscope $end
$scope module regM $end
$var wire 1 5 CONTROL_ENABLE_REG_WRITE $end
$var wire 3 Y read_regA [2:0] $end
$var wire 3 Z read_regB [2:0] $end
$var wire 32 [ write_value [31:0] $end
$var wire 3 \ write_reg [2:0] $end
$var wire 1 9 CONTROL_ALU_DONE $end
$var reg 32 ] aluValA [31:0] $end
$var reg 32 ^ reg1val [31:0] $end
$var reg 32 _ regBvalue [31:0] $end
$var integer 32 ` ii [31:0] $end
$upscope $end
$scope module sExtend $end
$var wire 16 a offset [15:0] $end
$var reg 32 b offsetExtended [31:0] $end
$upscope $end
$scope module vbMux $end
$var wire 1 8 CONTROL_ALUvalB $end
$var wire 32 c offsetExtended [31:0] $end
$var wire 32 d regBvalue [31:0] $end
$var reg 32 e aluValB [31:0] $end
$upscope $end
$scope module wdMux $end
$var wire 1 0 CONTROL_WRITE_DATA $end
$var wire 32 f aluResult [31:0] $end
$var wire 32 g memResult [31:0] $end
$var wire 32 h pcPlusOne [31:0] $end
$var reg 1 9 CONTROL_ALU_DONE $end
$var reg 32 i write_value [31:0] $end
$upscope $end
$scope module wrMux $end
$var wire 1 / CONTROL_WRITE_REG $end
$var wire 3 j destReg [2:0] $end
$var wire 3 k regB [2:0] $end
$var reg 3 l write_reg [2:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11 L
b1 K
b111 J
b10 I
b101 H
b110 G
b100 F
b0 E
$end
#0
$dumpvars
b1 l
b1 k
b110 j
b101 i
b1 h
b101 g
b1110 f
b1110 e
b0xxxxxxxx d
b1110 c
b1110 b
b1110 a
b1000 `
b0xxxxxxxx _
b101 ^
b0 ]
b1 \
b101 [
b1 Z
b0 Y
b1 X
b0 W
b1110 V
b1 U
b0 T
b0 S
b100000010000000000001110 R
b1000000 Q
b101 P
b0xxxxxxxx O
b1110 N
b0 M
b100000010000000000001110 D
b0 C
b10 B
b1110 A
b0 @
b0 ?
b1110 >
b1 =
b0 <
b1 ;
b100110001010111 :
09
08
07
06
15
04
03
12
b0 1
00
0/
b1110 .
b0 -
b1110 ,
1+
b100000010000000000001110 *
b101 )
b1110 (
b0 '
b1 &
b1 %
b101 $
b0xxxxxxxx #
b1 "
b101 !
$end
#100
0+
#200
b10 !
b10 [
b10 i
b10 )
b10 P
b10 g
b1101 .
b1101 A
b1101 N
b1101 f
b1101 ,
b1101 >
b1101 e
b101 #
b101 O
b101 _
b101 d
b1101 (
b1101 V
b1101 b
b1101 c
b10 "
b10 \
b10 l
b10 Z
b1101 a
b101 j
b10 k
b10 &
b10 ;
b10 X
b10 %
b10 =
b10 U
b10 h
b100000100000000000001101 *
b100000100000000000001101 D
b100000100000000000001101 R
b1 '
b1 <
b1 C
b1 S
b1 T
1+
#300
0+
#400
b11111111111111111111111111111111 !
b11111111111111111111111111111111 [
b11111111111111111111111111111111 i
b11111111111111111111111111111111 )
b11111111111111111111111111111111 P
b11111111111111111111111111111111 g
b1100 .
b1100 A
b1100 N
b1100 f
b1100 ,
b1100 >
b1100 e
b10 #
b10 O
b10 _
b10 d
b1100 (
b1100 V
b1100 b
b1100 c
b11 "
b11 \
b11 l
b11 Z
b1100 a
b100 j
b11 k
b11 &
b11 ;
b11 X
b11 %
b11 =
b11 U
b11 h
b100000110000000000001100 *
b100000110000000000001100 D
b100000110000000000001100 R
b10 '
b10 <
b10 C
b10 S
b10 T
1+
#500
0+
#600
b10 ,
b10 >
b10 e
02
b10 1
b10 @
b10 M
18
05
b101 -
b101 ?
b101 W
b101 ]
b10 (
b10 V
b10 b
b10 c
b10 "
b10 \
b10 l
b10000100100010101010001 :
b100 B
b10 Z
b1 Y
b10 a
b10 j
b10 k
b100 &
b100 ;
b100 X
b100 %
b100 =
b100 U
b100 h
b1000010100000000000000010 *
b1000010100000000000000010 D
b1000010100000000000000010 R
b11 '
b11 <
b11 C
b11 S
b11 T
1+
#700
0+
#800
b100 $
b100 ^
19
b100000100 !
b100000100 [
b100000100 i
b11111111 ,
b11111111 >
b11111111 e
b100000100 .
b100000100 A
b100000100 N
b100000100 f
b0 1
b0 @
b0 M
10
1/
b11111111 #
b11111111 O
b11111111 _
b11111111 d
b1 (
b1 V
b1 b
b1 c
b1 "
b1 \
b1 l
b10000010100010001000100 :
b0 B
b11 Z
b1 a
b1 j
b11 k
b101 &
b101 ;
b101 X
b101 %
b101 =
b101 U
b101 h
b10110000000000000001 *
b10110000000000000001 D
b10110000000000000001 R
b100 '
b100 <
b100 C
b100 S
b100 T
1+
#900
0+
#1000
17
b0 ,
b0 >
b0 e
b0 #
b0 O
b0 _
b0 d
b0 -
b0 ?
b0 W
b0 ]
09
b11111111111111111111111111111111 !
b11111111111111111111111111111111 [
b11111111111111111111111111111111 i
b10 1
b10 @
b10 M
00
0/
b11111111111111111111111111111101 (
b11111111111111111111111111111101 V
b11111111111111111111111111111101 b
b11111111111111111111111111111101 c
b0 "
b0 \
b0 l
b10000100100010101010001 :
b100 B
b0 Z
b0 Y
b1111111111111101 a
b101 j
b0 k
b11 &
b11 ;
b11 X
b110 %
b110 =
b110 U
b110 h
b1000000001111111111111101 *
b1000000001111111111111101 D
b1000000001111111111111101 R
b101 '
b101 <
b101 C
b101 S
b101 T
1+
#1100
0+
#1200
b10 ,
b10 >
b10 e
07
b10 #
b10 O
b10 _
b10 d
b100 -
b100 ?
b100 W
b100 ]
b10 (
b10 V
b10 b
b10 c
b10 "
b10 \
b10 l
b10 Z
b1 Y
b10 a
b10 j
b10 k
b100 &
b100 ;
b100 X
b100 %
b100 =
b100 U
b100 h
b1000010100000000000000010 *
b1000010100000000000000010 D
b1000010100000000000000010 R
b11 '
b11 <
b11 C
b11 S
b11 T
1+
#1300
0+
#1400
b11 $
b11 ^
19
b100000011 !
b100000011 [
b100000011 i
b11111111 ,
b11111111 >
b11111111 e
b100000011 .
b100000011 A
b100000011 N
b100000011 f
b0 1
b0 @
b0 M
10
1/
b11111111 #
b11111111 O
b11111111 _
b11111111 d
b1 (
b1 V
b1 b
b1 c
b1 "
b1 \
b1 l
b10000010100010001000100 :
b0 B
b11 Z
b1 a
b1 j
b11 k
b101 &
b101 ;
b101 X
b101 %
b101 =
b101 U
b101 h
b10110000000000000001 *
b10110000000000000001 D
b10110000000000000001 R
b100 '
b100 <
b100 C
b100 S
b100 T
1+
#1500
0+
#1600
17
b0 ,
b0 >
b0 e
b0 #
b0 O
b0 _
b0 d
b0 -
b0 ?
b0 W
b0 ]
09
b11111111111111111111111111111111 !
b11111111111111111111111111111111 [
b11111111111111111111111111111111 i
b10 1
b10 @
b10 M
00
0/
b11111111111111111111111111111101 (
b11111111111111111111111111111101 V
b11111111111111111111111111111101 b
b11111111111111111111111111111101 c
b0 "
b0 \
b0 l
b10000100100010101010001 :
b100 B
b0 Z
b0 Y
b1111111111111101 a
b101 j
b0 k
b11 &
b11 ;
b11 X
b110 %
b110 =
b110 U
b110 h
b1000000001111111111111101 *
b1000000001111111111111101 D
b1000000001111111111111101 R
b101 '
b101 <
b101 C
b101 S
b101 T
1+
#1700
0+
#1800
b10 ,
b10 >
b10 e
07
b10 #
b10 O
b10 _
b10 d
b11 -
b11 ?
b11 W
b11 ]
b10 (
b10 V
b10 b
b10 c
b10 "
b10 \
b10 l
b10 Z
b1 Y
b10 a
b10 j
b10 k
b100 &
b100 ;
b100 X
b100 %
b100 =
b100 U
b100 h
b1000010100000000000000010 *
b1000010100000000000000010 D
b1000010100000000000000010 R
b11 '
b11 <
b11 C
b11 S
b11 T
1+
#1900
0+
#2000
b10 $
b10 ^
19
b100000010 !
b100000010 [
b100000010 i
b11111111 ,
b11111111 >
b11111111 e
b100000010 .
b100000010 A
b100000010 N
b100000010 f
b0 1
b0 @
b0 M
10
1/
b11111111 #
b11111111 O
b11111111 _
b11111111 d
b1 (
b1 V
b1 b
b1 c
b1 "
b1 \
b1 l
b10000010100010001000100 :
b0 B
b11 Z
b1 a
b1 j
b11 k
b101 &
b101 ;
b101 X
b101 %
b101 =
b101 U
b101 h
b10110000000000000001 *
b10110000000000000001 D
b10110000000000000001 R
b100 '
b100 <
b100 C
b100 S
b100 T
1+
#2100
0+
#2200
17
b0 ,
b0 >
b0 e
b0 #
b0 O
b0 _
b0 d
b0 -
b0 ?
b0 W
b0 ]
09
b11111111111111111111111111111111 !
b11111111111111111111111111111111 [
b11111111111111111111111111111111 i
b10 1
b10 @
b10 M
00
0/
b11111111111111111111111111111101 (
b11111111111111111111111111111101 V
b11111111111111111111111111111101 b
b11111111111111111111111111111101 c
b0 "
b0 \
b0 l
b10000100100010101010001 :
b100 B
b0 Z
b0 Y
b1111111111111101 a
b101 j
b0 k
b11 &
b11 ;
b11 X
b110 %
b110 =
b110 U
b110 h
b1000000001111111111111101 *
b1000000001111111111111101 D
b1000000001111111111111101 R
b101 '
b101 <
b101 C
b101 S
b101 T
1+
#2300
0+
#2400
b10 ,
b10 >
b10 e
17
b10 #
b10 O
b10 _
b10 d
b10 -
b10 ?
b10 W
b10 ]
b10 (
b10 V
b10 b
b10 c
b10 "
b10 \
b10 l
b10 Z
b1 Y
b10 a
b10 j
b10 k
b110 &
b110 ;
b110 X
b100 %
b100 =
b100 U
b100 h
b1000010100000000000000010 *
b1000010100000000000000010 D
b1000010100000000000000010 R
b11 '
b11 <
b11 C
b11 S
b11 T
1+
#2500
0+
#2600
b0 ,
b0 >
b0 e
07
b0 .
b0 A
b0 N
b0 f
b0 1
b0 @
b0 M
08
b0 #
b0 O
b0 _
b0 d
b0 -
b0 ?
b0 W
b0 ]
b0 (
b0 V
b0 b
b0 c
b0 "
b0 \
b0 l
b1001110010011110100111101010000 :
b111 B
b0 Z
b0 Y
b0 a
b0 j
b0 k
b111 &
b111 ;
b111 X
b111 %
b111 =
b111 U
b111 h
b1110000000000000000000000 *
b1110000000000000000000000 D
b1110000000000000000000000 R
b110 '
b110 <
b110 C
b110 S
b110 T
1+
#2700
0+
#2800
b10 .
b10 A
b10 N
b10 f
19
b10 !
b10 [
b10 i
b10 ,
b10 >
b10 e
18
10
1/
b10 #
b10 O
b10 _
b10 d
b100 (
b100 V
b100 b
b100 c
b100 "
b100 \
b100 l
b10000010100010001000100 :
b0 B
b1 Z
b100 a
b100 j
b1 k
b1000 &
b1000 ;
b1000 X
b1000 %
b1000 =
b1000 U
b1000 h
b10000000000000100 *
b10000000000000100 D
b10000000000000100 R
b111 '
b111 <
b111 C
b111 S
b111 T
1+
#2900
0+
#3000
b0 #
b0 O
b0 _
b0 d
b111 $
b111 ^
b1111 .
b1111 A
b1111 N
b1111 f
b111 )
b111 P
b111 g
09
b111 !
b111 [
b111 i
b1111 ,
b1111 >
b1111 e
12
15
08
00
0/
b1111 (
b1111 V
b1111 b
b1111 c
b1 "
b1 \
b1 l
b100110001010111 :
b10 B
b1111 a
b111 j
b1001 &
b1001 ;
b1001 X
b1001 %
b1001 =
b1001 U
b1001 h
b100000010000000000001111 *
b100000010000000000001111 D
b100000010000000000001111 R
b1000 '
b1000 <
b1000 C
b1000 S
b1000 T
1+
#3100
0+
#3200
16
05
b10 #
b10 O
b10 _
b10 d
b100 "
b100 \
b100 l
b101001101010111 :
b11 B
b100 Z
b100 k
b1010 &
b1010 ;
b1010 X
b1010 %
b1010 =
b1010 U
b1010 h
b110001000000000000001111 *
b110001000000000000001111 D
b110001000000000000001111 R
b1001 '
b1001 <
b1001 C
b1001 S
b1001 T
1+
#3300
0+
#3400
b10 $
b10 ^
b10 !
b10 [
b10 i
b10 )
b10 P
b10 g
06
15
b111 #
b111 O
b111 _
b111 d
b1 "
b1 \
b1 l
b100110001010111 :
b10 B
b1 Z
b1 k
b1011 &
b1011 ;
b1011 X
b1011 %
b1011 =
b1011 U
b1011 h
b100000010000000000001111 *
b100000010000000000001111 D
b100000010000000000001111 R
b1010 '
b1010 <
b1010 C
b1010 S
b1010 T
1+
#3500
0+
#3600
b0 .
b0 A
b0 N
b0 f
b0 ,
b0 >
b0 e
02
05
14
b0 #
b0 O
b0 _
b0 d
b0 (
b0 V
b0 b
b0 c
b0 "
b0 \
b0 l
b1001000010000010100110001010100 :
b110 B
b0 Z
b0 a
b0 j
b0 k
b1100 &
b1100 ;
b1100 X
b1100 %
b1100 =
b1100 U
b1100 h
b1100000000000000000000000 *
b1100000000000000000000000 D
b1100000000000000000000000 R
b1011 '
b1011 <
b1011 C
b1011 S
b1011 T
1+
#3700
0+
#3800
1+
