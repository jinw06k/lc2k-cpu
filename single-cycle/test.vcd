$date
	Fri Jun 28 10:05:23 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPU $end
$var wire 32 ! write_value [31:0] $end
$var wire 3 " write_reg [2:0] $end
$var wire 32 # regBvalue [31:0] $end
$var wire 32 $ reg1val [31:0] $end
$var wire 32 % pcPlusOne [31:0] $end
$var wire 32 & pcInput [31:0] $end
$var wire 32 ' pcCurrent [31:0] $end
$var wire 32 ( offsetExtended [31:0] $end
$var wire 32 ) memResult [31:0] $end
$var wire 32 * instruction [31:0] $end
$var wire 1 + clk $end
$var wire 32 , aluValB [31:0] $end
$var wire 32 - aluValA [31:0] $end
$var wire 32 . aluResult [31:0] $end
$var wire 1 / CONTROL_WRITE_REG $end
$var wire 1 0 CONTROL_WRITE_DATA $end
$var wire 2 1 CONTROL_OPERATION [1:0] $end
$var wire 1 2 CONTROL_MEM_ACCESS $end
$var wire 1 3 CONTROL_JALR $end
$var wire 1 4 CONTROL_HALT $end
$var wire 1 5 CONTROL_ENABLE_REG_WRITE $end
$var wire 1 6 CONTROL_ENABLE_MEM_WRITE $end
$var wire 1 7 CONTROL_BEQ $end
$var wire 1 8 CONTROL_ALUvalB $end
$var wire 1 9 CONTROL_ALU_DONE $end
$var reg 33 : curOpcode [32:0] $end
$scope module PC $end
$var wire 32 ; pcInput [31:0] $end
$var wire 1 + clk $end
$var wire 1 4 CONTROL_HALT $end
$var reg 32 < pcCurrent [31:0] $end
$var reg 32 = pcPlusOne [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 > aluValB [31:0] $end
$var wire 32 ? aluValA [31:0] $end
$var wire 2 @ CONTROL_OPERATION [1:0] $end
$var reg 1 7 CONTROL_BEQ $end
$var reg 32 A aluResult [31:0] $end
$upscope $end
$scope module cRom $end
$var wire 3 B opcode [2:0] $end
$var wire 32 C pcCurrent [31:0] $end
$var wire 32 D instruction [31:0] $end
$var parameter 3 E OP_ADD $end
$var parameter 3 F OP_BEQ $end
$var parameter 3 G OP_HALT $end
$var parameter 3 H OP_JALR $end
$var parameter 3 I OP_LW $end
$var parameter 3 J OP_NOOP $end
$var parameter 3 K OP_NOR $end
$var parameter 3 L OP_SW $end
$var reg 1 8 CONTROL_ALUvalB $end
$var reg 1 6 CONTROL_ENABLE_MEM_WRITE $end
$var reg 1 5 CONTROL_ENABLE_REG_WRITE $end
$var reg 1 4 CONTROL_HALT $end
$var reg 1 3 CONTROL_JALR $end
$var reg 1 2 CONTROL_MEM_ACCESS $end
$var reg 2 M CONTROL_OPERATION [1:0] $end
$var reg 1 0 CONTROL_WRITE_DATA $end
$var reg 1 / CONTROL_WRITE_REG $end
$upscope $end
$scope module clock $end
$var reg 1 + clk $end
$upscope $end
$scope module dataM $end
$var wire 1 6 CONTROL_ENABLE_MEM_WRITE $end
$var wire 1 2 CONTROL_MEM_ACCESS $end
$var wire 32 N aluResult [31:0] $end
$var wire 32 O regBvalue [31:0] $end
$var reg 32 P memResult [31:0] $end
$var integer 32 Q ii [31:0] $end
$upscope $end
$scope module instrM $end
$var wire 32 R instr [31:0] $end
$var wire 32 S pcCurrent [31:0] $end
$upscope $end
$scope module pM $end
$var wire 1 7 CONTROL_BEQ $end
$var wire 1 3 CONTROL_JALR $end
$var wire 32 T pcCurrent [31:0] $end
$var wire 32 U pcPlusOne [31:0] $end
$var wire 32 V offsetExtended [31:0] $end
$var wire 32 W aluValA [31:0] $end
$var reg 32 X pcOutput [31:0] $end
$upscope $end
$scope module regM $end
$var wire 1 5 CONTROL_ENABLE_REG_WRITE $end
$var wire 3 Y read_regA [2:0] $end
$var wire 3 Z read_regB [2:0] $end
$var wire 32 [ write_value [31:0] $end
$var wire 3 \ write_reg [2:0] $end
$var wire 1 9 CONTROL_ALU_DONE $end
$var reg 32 ] aluValA [31:0] $end
$var reg 32 ^ reg1val [31:0] $end
$var reg 32 _ regBvalue [31:0] $end
$var integer 32 ` ii [31:0] $end
$upscope $end
$scope module sExtend $end
$var wire 16 a offset [15:0] $end
$var reg 32 b offsetExtended [31:0] $end
$upscope $end
$scope module vbMux $end
$var wire 1 8 CONTROL_ALUvalB $end
$var wire 32 c offsetExtended [31:0] $end
$var wire 32 d regBvalue [31:0] $end
$var reg 32 e aluValB [31:0] $end
$upscope $end
$scope module wdMux $end
$var wire 1 0 CONTROL_WRITE_DATA $end
$var wire 32 f aluResult [31:0] $end
$var wire 32 g memResult [31:0] $end
$var wire 32 h pcPlusOne [31:0] $end
$var reg 1 9 CONTROL_ALU_DONE $end
$var reg 32 i write_value [31:0] $end
$upscope $end
$scope module wrMux $end
$var wire 1 / CONTROL_WRITE_REG $end
$var wire 3 j destReg [2:0] $end
$var wire 3 k regB [2:0] $end
$var reg 3 l write_reg [2:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11 L
b1 K
b111 J
b10 I
b101 H
b110 G
b100 F
b0 E
$end
#0
$dumpvars
b10 l
b10 k
b111 j
b101 i
b1 h
b101 g
b111 f
b111 e
b0xxxxxxxx d
b111 c
b111 b
b111 a
b1000 `
b0xxxxxxxx _
b0 ^
b0 ]
b10 \
b101 [
b10 Z
b0 Y
b1 X
b0 W
b111 V
b1 U
b0 T
b0 S
b100000100000000000000111 R
b1000000 Q
b101 P
b0xxxxxxxx O
b111 N
b0 M
b100000100000000000000111 D
b0 C
b10 B
b111 A
b0 @
b0 ?
b111 >
b1 =
b0 <
b1 ;
b100110001010111 :
09
08
07
06
15
04
03
12
b0 1
00
0/
b111 .
b0 -
b111 ,
1+
b100000100000000000000111 *
b101 )
b111 (
b0 '
b1 &
b1 %
b0 $
b0xxxxxxxx #
b10 "
b101 !
$end
#100
0+
#200
b0 ,
b0 >
b0 e
b101 .
b101 A
b101 N
b101 f
02
13
b0 #
b0 O
b0 _
b0 d
b101 -
b101 ?
b101 W
b101 ]
b0 (
b0 V
b0 b
b0 c
b11 "
b11 \
b11 l
b1001010010000010100110001010010 :
b101 B
b11 Z
b10 Y
b0 a
b0 j
b11 k
b101 &
b101 ;
b101 X
b10 %
b10 =
b10 U
b10 h
b1010100110000000000000000 *
b1010100110000000000000000 D
b1010100110000000000000000 R
b1 '
b1 <
b1 C
b1 S
b1 T
1+
#300
0+
#400
b1010 !
b1010 [
b1010 i
b1010 $
b1010 ^
b1010 .
b1010 A
b1010 N
b1010 f
19
b101 ,
b101 >
b101 e
b110 &
b110 ;
b110 X
18
05
10
1/
03
b101 #
b101 O
b101 _
b101 d
b1 (
b1 V
b1 b
b1 c
b1 "
b1 \
b1 l
b10000010100010001000100 :
b0 B
b10 Z
b1 a
b1 j
b10 k
b110 %
b110 =
b110 U
b110 h
b100100000000000000001 *
b100100000000000000001 D
b100100000000000000001 R
b101 '
b101 <
b101 C
b101 S
b101 T
1+
#500
0+
#600
b1010 #
b1010 O
b1010 _
b1010 d
b1010 -
b1010 ?
b1010 W
b1010 ]
b1010 .
b1010 A
b1010 N
b1010 f
09
b101 !
b101 [
b101 i
b0 ,
b0 >
b0 e
08
00
0/
14
b0 (
b0 V
b0 b
b0 c
b0 "
b0 \
b0 l
b1001000010000010100110001010100 :
b110 B
b0 Z
b0 Y
b0 a
b0 j
b0 k
b111 &
b111 ;
b111 X
b111 %
b111 =
b111 U
b111 h
b1100000000000000000000000 *
b1100000000000000000000000 D
b1100000000000000000000000 R
b110 '
b110 <
b110 C
b110 S
b110 T
1+
#700
0+
#800
1+
